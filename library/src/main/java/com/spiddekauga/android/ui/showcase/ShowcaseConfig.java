package com.spiddekauga.android.ui.showcase;

import android.content.Context;
import android.content.res.ColorStateList;
import android.content.res.Resources;
import android.graphics.Color;
import android.os.Build;
import android.support.annotation.ColorInt;
import android.support.annotation.ColorRes;

public class ShowcaseConfig {
public static final long DEFAULT_DELAY = 0;
static final long ANIMATION_IN_TIME = 300;
static final long ANIMATION_HIDE_TIME = 300;
static final long ANIMATION_PRESSED_TIME = 300;
static int mMaskColorDefault = -1;
static int mTargetRadiusDefault = -1;
static int mTargetRadiusDefaultSq = -1;
static int mTargetNearBorderDistance = -1;
private static boolean mInitialized = false;
private long mDelay = DEFAULT_DELAY;
private int mMaskColor;
private int mTitleTextColor = -1;
private int mContentTextColor = -1;
private int mDismissTextColor = -1;
private boolean mRenderOverNav = false;
private boolean mBackgroundFullscreen = false;

public ShowcaseConfig(Context context) {
	init(context);
	mMaskColor = mMaskColorDefault;
}

static void init(Context context) {
	if (!mInitialized) {
		setDefaultMaskColor(context);

		Resources resources = context.getResources();
		mTargetRadiusDefault = resources.getDimensionPixelSize(R.dimen.material_showcase_target_radius);
		mTargetRadiusDefaultSq = mTargetRadiusDefault * mTargetRadiusDefault;
		mTargetNearBorderDistance = resources.getDimensionPixelSize(R.dimen.material_showcase_target_near_border);
		mInitialized = true;
	}
}

private static void setDefaultMaskColor(Context context) {
	int color = getColor(context.getResources(), R.color.material_showcase_background_color);

	// Set correct alpha
	int r = Color.red(color);
	int g = Color.green(color);
	int b = Color.blue(color);
	int a = 0xF5;
	mMaskColorDefault = Color.argb(a, r, g, b);
}

/**
 * Returns a themed color integer associated with a particular resource ID. If the resource holds a
 * complex {@link ColorStateList}, then the default color from the set is returned.
 * @param resources location of the color resource
 * @param id The desired resource identifier, as generated by the aapt tool. This integer encodes
 * the package, type, and resource entry. The value 0 is an invalid identifier.
 * @return A single color value in the form 0xAARRGGBB.
 * @throws Resources.NotFoundException Throws NotFoundException if the given ID does not exist.
 */
@ColorInt
@SuppressWarnings("deprecated")
private static int getColor(Resources resources, @ColorRes int id) throws Resources.NotFoundException {
	if (Build.VERSION.SDK_INT <= 22) {
		return resources.getColor(id);
	} else {
		return resources.getColor(id, null);
	}
}

public long getDelay() {
	return mDelay;
}

public void setDelay(long delay) {
	this.mDelay = delay;
}

public int getMaskColor() {
	return mMaskColor;
}

public void setMaskColor(int maskColor) {
	mMaskColor = maskColor;
}

public int getTitleTextColor() {
	return mTitleTextColor;
}

public void setTitleTextColor(int titleTextColor) {
	mTitleTextColor = titleTextColor;
}

public int getContentTextColor() {
	return mContentTextColor;
}

public void setContentTextColor(int mContentTextColor) {
	this.mContentTextColor = mContentTextColor;
}

public int getDismissTextColor() {
	return mDismissTextColor;
}

public void setDismissTextColor(int dismissTextColor) {
	this.mDismissTextColor = dismissTextColor;
}

public boolean isBackgroundFullscreen() {
	return mBackgroundFullscreen;
}

/**
 * Set the background to render on the entire screen and not only a circle. Automatically does this
 * if no target has been set.
 * @param fullscreen If set to true the background will render the entire screen. If set to false it
 * will instead render a circle around the target and content like material's design.
 */
public void setBackgroundFullscreen(boolean fullscreen) {
	mBackgroundFullscreen = fullscreen;
}

public boolean getRenderOverNavigationBar() {
	return mRenderOverNav;
}

public void setRenderOverNavigationBar(boolean renderOverNav) {
	this.mRenderOverNav = renderOverNav;
}
}
